{"version":3,"sources":["Snake/Node.jsx","Snake/Environment.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","row","snakeTimer","isFood","extraClassName","id","className","onClick","click","e","keyDown","React","Component","NUMBER_COLS","NUMBER_ROWS","SPEED","Environment","sendData","parentCallBack","length","handleKeyPress","event","newDirection","state","headPosition","direction","keyPressed","keyCode","newPosition","food","eatFood","gameOver","parseInt","timers","setState","clearInterval","timer","setInterval","moveSnake","grid","Math","floor","getInitialGrid","getInitialTimers","x","random","y","message","alert","map","rowIdx","node","nodeIdx","handleClick","currentRow","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f5774f9.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './Node.css';\n\nexport default class Node extends React.Component{\n\n    render(){\n        const {\n            col,\n            row,\n            snakeTimer,\n            isFood\n        } = this.props;\n        const extraClassName = snakeTimer > 0\n        ? 'yes-snake'\n        : isFood\n        ? 'food'\n        : '';\n\n        return (\n            <>\n                <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onClick = {() => this.props.click() }>\n                tabIndex = \"0\" \n                onKeyDown = {(e) => this.props.keyDown(e) }>\n                </div>\n            </>\n        );\n    }\n}","import React from \"react\";\n\nimport './Environment.css';\n\nimport Node from './Node';\n\nconst NUMBER_COLS = 20;\nconst NUMBER_ROWS = 20;\nconst SPEED = 200;\n\nexport default class Environment extends React.Component{\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            headPosition: [Math.floor(NUMBER_ROWS/2), Math.floor(NUMBER_COLS/2)],\n            direction: 'up',\n        }\n    };\n\n    sendData = () => {\n        this.props.parentCallBack(this.length-2);\n    };\n\n    componentDidMount(){\n        const grid = getInitialGrid();\n        this.setState({grid: grid});\n\n        this.timer = setInterval(() => this.moveSnake(),SPEED);\n\n        this.timers = getInitialTimers();\n        this.length = 2;\n        this.food = [14,14];\n    };\n\n\n    moveSnake(){\n\n        const {headPosition} = this.state;\n\n        const newPosition = this.state.direction === 'up'\n        ? [(headPosition[0]-1), headPosition[1]]\n        : this.state.direction === 'down'\n        ? [headPosition[0]+1, headPosition[1]]\n        : this.state.direction === 'right'\n        ? [headPosition[0], headPosition[1]+1]\n        : [headPosition[0], (headPosition[1]-1)];\n\n        if (newPosition[0] > NUMBER_ROWS-1 || newPosition[0] < 0 || newPosition[1] > NUMBER_COLS-1 || newPosition[1] < 0){\n            this.gameOver();\n            return;\n        };\n        if (parseInt(this.timers[newPosition[0]][newPosition[1]]) > 0) {\n            this.gameOver();\n        };\n        if (newPosition[0] === this.food[0] && newPosition[1] === this.food[1]){\n            this.eatFood();\n        };\n        this.setState({\n            headPosition: newPosition,\n        });\n    };\n\n    eatFood(){\n        const x = parseInt(Math.random() * NUMBER_ROWS);\n        const y = parseInt(Math.random() * NUMBER_COLS);\n        this.length++;\n        this.food = [x,y];\n    }\n\n\n    gameOver(){\n        clearInterval(this.timer);\n        const message = \"score: \"+(this.length-2);\n        alert(message);\n        const grid = getInitialGrid();\n        const headPosition = [Math.floor(NUMBER_ROWS/2), Math.floor(NUMBER_COLS/2)];\n        this.setState({grid: grid, headPosition: headPosition, direction: 'up'});\n        this.length = 2;\n        this.timers = getInitialTimers();\n        this.timer = setInterval(() => this.moveSnake(),SPEED);\n    };\n\n\n    handleClick() {\n        const {headPosition} = this.state;\n\n        const direction = this.state.direction === 'up'\n        ? 'right'\n        : this.state.direction === 'right'\n        ? 'down'\n        : this.state.direction === 'down'\n        ? 'left'\n        : 'up';\n\n        const newPosition = direction === 'up'\n        ? [(headPosition[0]-1), headPosition[1]]\n        : direction === 'down'\n        ? [(headPosition[0]+1), headPosition[1]]\n        : direction === 'right'\n        ? [headPosition[0], headPosition[1]+1]\n        : [headPosition[0], headPosition[1]-1];\n\n        if (newPosition[0] === this.food[0] && newPosition[1] === this.food[1]){\n            this.eatFood();\n        };\n        if (newPosition[0] > NUMBER_ROWS-1 || newPosition[0] < 0 || newPosition[1] > NUMBER_COLS-1 || newPosition[1] < 0){\n            this.gameOver();\n            return;\n        };\n        if (parseInt(this.timers[newPosition[0]][newPosition[1]]) > 0) {\n            this.gameOver();\n        };\n\n        this.setState({\n            headPosition: newPosition,\n            direction: direction\n        });\n\n        clearInterval(this.timer);\n        this.timer = setInterval(() => this.moveSnake(),SPEED);\n    };\n\n\n    handleKeyPress = (event) => {\n        const {headPosition, direction} = this.state;\n        const keyPressed = event.keyCode;\n        let newDirection;\n\n        if (direction === 'up' || direction === 'down') {\n            newDirection = keyPressed === 38\n            ? 'left'\n            : keyPressed === 40\n            ? 'right'\n            : direction;\n        }\n        if (direction === 'left' || direction === 'right'){\n            newDirection = keyPressed === 37\n            ? 'up'\n            : keyPressed === 39\n            ? 'down'\n            : direction;\n        }\n\n        const newPosition = direction === 'up'\n        ? [(headPosition[0]-1), headPosition[1]]\n        : direction === 'down'\n        ? [(headPosition[0]+1), headPosition[1]]\n        : direction === 'right'\n        ? [headPosition[0], headPosition[1]+1]\n        : direction === 'left'\n        ? [headPosition[0], headPosition[1]-1]\n        : [headPosition[0], headPosition[1]];\n\n        if (newPosition[0] === this.food[0] && newPosition[1] === this.food[1]){\n            this.eatFood();\n        };\n        if (newPosition[0] > NUMBER_ROWS-1 || newPosition[0] < 0 || newPosition[1] > NUMBER_COLS-1 || newPosition[1] < 0){\n            this.gameOver();\n            return;\n        };\n        if (parseInt(this.timers[newPosition[0]][newPosition[1]]) > 0) {\n            this.gameOver();\n        };\n\n        this.setState({\n            headPosition: newPosition,\n            direction: newDirection\n        });\n\n        clearInterval(this.timer);\n        this.timer = setInterval(() => this.moveSnake(),SPEED);\n    }\n\n\n    render(){\n        const {grid, headPosition} = this.state;\n\n        return (\n            <>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                           <div key={rowIdx}>\n                               {row.map((node, nodeIdx) => {\n\n                                    const [row, col] = node;\n                                    if (row === headPosition[0] && col === headPosition[1]){\n                                        this.timers[row][col] += this.length\n                                    }\n                                    if (this.timers[row][col] > 0){\n                                        this.timers[row][col] -= 1\n                                    };\n\n                                    let isFood = false;\n                                    if (this.food[0] === row && this.food[1] === col){\n                                        isFood = true;\n                                    };\n\n                                    return (\n                                        <>\n                                            <Node\n                                            col = {col}\n                                            row = {row}\n                                            snakeTimer = {this.timers[row][col]}\n                                            click = {() => {this.handleClick();}}\n                                            keyDown = {(e) => this.handleKeyPress(e)}\n                                            isFood = {isFood}></Node>\n                                        </>\n                                    );\n                               })}\n                            </div> \n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row<NUMBER_ROWS; row++) {\n        const currentRow = [];\n        for (let col = 0; col<NUMBER_COLS; col++){\n            currentRow.push([col,row]);\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst getInitialTimers = () => {\n    const timers = [];\n    for (let row = 0; row<NUMBER_ROWS; row++) {\n        const currentRow = [];\n        for (let col = 0; col<NUMBER_COLS; col++){\n            currentRow.push([0]);\n        }\n        timers.push(currentRow);\n    }\n    return timers;\n};","import './App.css';\n\nimport Environment from './Snake/Environment'\nimport React from 'react';\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <Environment></Environment>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}