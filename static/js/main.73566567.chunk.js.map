{"version":3,"sources":["Snake/Node.jsx","Snake/Environment.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","row","snakeTimer","isFood","extraClassName","id","className","onClick","click","React","Component","NUMBER_COLS","NUMBER_ROWS","Environment","sendData","parentCallBack","length","state","grid","headPosition","Math","floor","direction","getInitialGrid","setState","timer","setInterval","moveSnake","timers","getInitialTimers","food","newPosition","gameOver","parseInt","eatFood","x","random","y","clearInterval","message","alert","map","rowIdx","node","nodeIdx","handleClick","onKeyDown","e","handleKeyDown","currentRow","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73566567.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './Node.css';\n\nexport default class Node extends React.Component{\n\n    render(){\n        const {\n            col,\n            row,\n            snakeTimer,\n            isFood\n        } = this.props;\n        const extraClassName = snakeTimer > 0\n        ? 'yes-snake'\n        : isFood\n        ? 'food'\n        : '';\n\n        return (\n            <>\n                <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onClick = {() => this.props.click() }>\n                </div>\n            </>\n        );\n    }\n}","import React from \"react\";\n\nimport './Environment.css';\n\nimport Node from './Node';\n\nconst NUMBER_COLS = 20;\nconst NUMBER_ROWS = 20;\nconst SPEED = 200;\n\nexport default class Environment extends React.Component{\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            headPosition: [Math.floor(NUMBER_ROWS/2), Math.floor(NUMBER_COLS/2)],\n            direction: 'up',\n        }\n    };\n\n    sendData = () => {\n        this.props.parentCallBack(this.length-2);\n    };\n\n    componentDidMount(){\n        const grid = getInitialGrid();\n        this.setState({grid: grid});\n\n        this.timer = setInterval(() => this.moveSnake(),SPEED);\n\n        this.timers = getInitialTimers();\n        this.length = 2;\n        this.food = [14,14];\n    };\n\n\n    moveSnake(){\n\n        const {headPosition} = this.state;\n\n        const newPosition = this.state.direction === 'up'\n        ? [(headPosition[0]-1), headPosition[1]]\n        : this.state.direction === 'down'\n        ? [headPosition[0]+1, headPosition[1]]\n        : this.state.direction === 'right'\n        ? [headPosition[0], headPosition[1]+1]\n        : [headPosition[0], (headPosition[1]-1)];\n\n        if (newPosition[0] > NUMBER_ROWS-1 || newPosition[0] < 0 || newPosition[1] > NUMBER_COLS-1 || newPosition[1] < 0){\n            this.gameOver();\n            return;\n        };\n        if (parseInt(this.timers[newPosition[0]][newPosition[1]]) > 0) {\n            this.gameOver();\n        };\n        if (newPosition[0] === this.food[0] && newPosition[1] === this.food[1]){\n            this.eatFood();\n        };\n        this.setState({\n            headPosition: newPosition,\n        });\n    };\n\n    eatFood(){\n        const x = parseInt(Math.random() * NUMBER_ROWS);\n        const y = parseInt(Math.random() * NUMBER_COLS);\n        this.length++;\n        this.food = [x,y];\n    }\n\n\n    gameOver(){\n        clearInterval(this.timer);\n        const message = \"score: \"+(this.length-2);\n        alert(message);\n        const grid = getInitialGrid();\n        const headPosition = [Math.floor(NUMBER_ROWS/2), Math.floor(NUMBER_COLS/2)];\n        this.setState({grid: grid, headPosition: headPosition, direction: 'up'});\n        this.length = 2;\n        this.timers = getInitialTimers();\n        this.timer = setInterval(() => this.moveSnake(),SPEED);\n    };\n\n\n    handleClick() {\n        const {headPosition} = this.state;\n\n        const direction = this.state.direction === 'up'\n        ? 'right'\n        : this.state.direction === 'right'\n        ? 'down'\n        : this.state.direction === 'down'\n        ? 'left'\n        : 'up';\n\n        const newPosition = direction === 'up'\n        ? [(headPosition[0]-1), headPosition[1]]\n        : direction === 'down'\n        ? [(headPosition[0]+1), headPosition[1]]\n        : direction === 'right'\n        ? [headPosition[0], headPosition[1]+1]\n        : [headPosition[0], headPosition[1]-1];\n\n        if (newPosition[0] === this.food[0] && newPosition[1] === this.food[1]){\n            this.eatFood();\n        };\n        if (newPosition[0] > NUMBER_ROWS-1 || newPosition[0] < 0 || newPosition[1] > NUMBER_COLS-1 || newPosition[1] < 0){\n            this.gameOver();\n            return;\n        };\n        if (parseInt(this.timers[newPosition[0]][newPosition[1]]) > 0) {\n            this.gameOver();\n        };\n\n        this.setState({\n            headPosition: newPosition,\n            direction: direction\n        });\n\n        clearInterval(this.timer);\n        this.timer = setInterval(() => this.moveSnake(),SPEED);\n    };\n\n\n    render(){\n        const {grid, headPosition} = this.state;\n\n        return (\n            <>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                           <div key={rowIdx}>\n                               {row.map((node, nodeIdx) => {\n\n                                    const [row, col] = node;\n                                    if (row === headPosition[0] && col === headPosition[1]){\n                                        this.timers[row][col] += this.length\n                                    }\n                                    if (this.timers[row][col] > 0){\n                                        this.timers[row][col] -= 1\n                                    };\n\n                                    let isFood = false;\n                                    if (this.food[0] === row && this.food[1] === col){\n                                        isFood = true;\n                                    };\n\n                                    return (\n                                        <>\n                                            <Node\n                                            col = {col}\n                                            row = {row}\n                                            snakeTimer = {this.timers[row][col]}\n                                            click = {() => {this.handleClick();}}\n                                            onKeyDown={(e) => this.handleKeyDown(e)}\n                                            isFood = {isFood}></Node>\n                                        </>\n                                    );\n                               })}\n                            </div> \n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row<NUMBER_ROWS; row++) {\n        const currentRow = [];\n        for (let col = 0; col<NUMBER_COLS; col++){\n            currentRow.push([col,row]);\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst getInitialTimers = () => {\n    const timers = [];\n    for (let row = 0; row<NUMBER_ROWS; row++) {\n        const currentRow = [];\n        for (let col = 0; col<NUMBER_COLS; col++){\n            currentRow.push([0]);\n        }\n        timers.push(currentRow);\n    }\n    return timers;\n};","import './App.css';\n\nimport Environment from './Snake/Environment'\nimport React from 'react';\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <Environment></Environment>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}